 
"""
DESCRIPTION

AUTHOR

CREATION DATE

    2019-04-15 @ BSRF 1W1A

COPYRIGHT

VERSION

DEPENDENCIES

    None

CHANGE LOG

    2019-04-15
    
    - first version, using Ligang's EPICS driver which insert/
    remove only one filter each time
    
    TODO list:
    - att_help
    - global variable
    - att_setup

    2019-05-05

    -add macro "flt_fast"
    -add debug information variable ATT_DEBUG

    2019-05-07

    
"""

#================================================================
# Global variable definitions
#================================================================

global ATT_DEBUG
       ATT_DEBUG = 1

#================================================================
# Macro command definitions
#================================================================

#----------------------------------------------------------------
def flt '
        """
        Put in filters according to <mask>

        It will first insert all four filters, then remove the 
        unwanted filter.

        The text commands via serial port should be sent with a 
        interval not less than 0.4 seconds(by experiment) to 
        avoid command loss.
        ##This sleep time can be set by a global variable

        This macro command calls the PFCU EPICS driver "pm16c"
        developed by Ligang(li75gang@ihep.ac.cn)
        
        Usage::
        
           > flt <mask>
           
        """
        
        local i, mask, pv_name_default, pv_name
        local _flt_timer1, _flt_timer2, _flt_time

        if ($# != 1) {
                print "Usage: filter mask"
                exit
        }

        mask = $1
        mask = int(mask)

        if (mask < 0 || mask > 15) {
                print "Error: Invalid filter number"
                exit
        }
        
        _flt_timer1 = time()

        pv_name_default = "1w1a:InsertFil"
        for (i = 4; i > 0; i--) {
                pv_name = sprintf("%s%d", pv_name_default, i)
                if (ATT_DEBUG)
                	print(pv_name)
                epics_put(pv_name, "Insert")
                sleep(0.5)
        }

        pv_name_default = "1w1a:RemoveFil"
        for(i = 4; i > 0; i--) {
                if (!(mask & pow(2, i))) {
                	pv_name = sprintf("%s%d", pv_name_default, i)
                	if (ATT_DEBUG)
	                	print(pv_name)
                	epics_put(pv_name, "Remove")
                	sleep(0.5)
                }
        }

        _flt_timer2 = time()
        _flt_time = _flt_timer2 - _flt_timer1
        printf("Filter action period: %.2f", _flt_time)

'

def flt_pos '
        """
        Print current filter status.
        
        Usage::
        
           > flt_pos
           
        """
        
        local pv_name, fil_pos, r_value, i
              pv_name = "1w1a:InqFilPos"
              
        epics_put(pv_name, 0)
        sleep(0.5)
        r_value = epics_get(pv_name)

        flt_pos = 0
        for (i = 0; i < 4; i++) {
        	j = r_value & 1
        	fil_pos += j * pow(2, 4-1-i)
        	r_value = r_value >> 1
        }
        
        printf("att: %d", fil_pos)
'

def att '
        """
        Print current filter status, or put in filters according 
        to <mask>.
        
        Usage::
        
           > att <mask>
           > att
           
        Arguments:
           :mask: The binary mask specifying which filters wil be 
           inserted.
           
        """

        flt_pos

        if ($# == 1) {
              flt $1
              printf("New - ")
              flt_pos
        }
        else {
              print("Error: Invalid arguments")
              print("Usage: att mask")
              print("Usage: att")
        }
'

def flt_fast '

		"""
        Put in filters according to <mask>

        It will inquire the present status of four filters. By 
        comparing the present status and the tartget status, 
        the action of each filter will be known.

        If one filter is not supposed to act, no matter insert 
        or remove, it will stay. And if it is supposed to change
        its status, it will insert or remove according to its 
        target status.

        The text commands via serial port should be sent with a 
        interval not less than 0.4 seconds(by experiment) to 
        avoid command loss when all 4 filters are required to 
        move. To make it always succeed, the sleep time is now 
        set to 0.5 second.
        ##This sleep time can be set by a global variable

        This macro command calls the PFCU EPICS driver "pm16c"
        developed by Ligang(li75gang@ihep.ac.cn)

        Usage::
        
           > flt_fast <mask>
           
		"""

	    local i, j, k, mask, pv_name_in, pv_name_out, pv_name
	    local r_value, fil_pos
        local _flt_timer1, _flt_timer2, _flt_time

        pv_name = "1w1a:InqFilPos"
              
        epics_put(pv_name, 0)
        sleep(0.5)
        r_value = epics_get(pv_name)

        flt_pos = 0
        for (i = 0; i < 4; i++) {
        	j = r_value & 1
        	fil_pos += j * pow(2, 4-1-i)
        	r_value = r_value >> 1
        }

        if ($# != 1) {
                print "Usage: filter mask"
                exit
        }

        mask = $1
        mask = int(mask)

        if (mask < 0 || mask > 15) {
                print "Error: Invalid filter number"
                exit
        }
        
        _flt_timer1 = time()

        pv_name_in = "1w1a:InsertFil"
        pv_name_out = "1w1a:RemoveFil"

        for (i = 0; i < 4; i++) {
        		j = mask & 1
        		k = fil_pos & 1

        		if (j != k) {
        			if (j > 0) 
        				pv_name = sprintf("%s%d", pv_name_in, (i+1))
        			else
        				pv_name = sprintf("%s%d", pv_name_out, (i+1))

        			if (ATT_DEBUG)
                		print(pv_name)
                	epics_put(pv_name, 1)
                	sleep(0.5)
        		}
                
                mask = mask >> 1
                fil_pos = fil_pos >> 1
        }

        _flt_timer2 = time()
        _flt_time = _flt_timer2 - _flt_timer1
        printf("Filter action period: %.2f", _flt_time)
'

def flt_onetime '
        local i, mask, pv_name_default, pv_name
        local _flt_timer1, _flt_timer2, _flt_time

        if ($# != 1) {
                print "Usage: filter mask"
                exit
        }

        mask = $1
        mask = int(mask)

        if (mask < 0 || mask > 15) {
                print "Error: Invalid filter number"
                exit
        }
        
        _flt_timer1 = time()

        pv_name_default = "1w1a:testBO"
        for(i = 4; i > 0; i--) {

        		pv_name = sprintf("%s%d", pv_name_default, i)

                if (mask & pow(2, (i-1)) {
                	if (ATT_DEBUG)
	                	printf("%s: Insert", pv_name)
                	epics_put(pv_name, 1)
                }
                else {
                	if (ATT_DEBUG)
	                	printf("%s: Remove", pv_name)
                	epics_put(pv_name, 0)
                }
        }
        sleep(0.1)

        pv_name = "1w1a:callPFCU"
        epics_put(pv_name, 1)

        _flt_timer2 = time()
        _flt_time = _flt_timer2 - _flt_timer1
        printf("Filter action period: %.2f", _flt_time)
'