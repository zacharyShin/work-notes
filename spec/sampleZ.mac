global sampleZ_MAX_COUNT
       sampleZ_MAX_COUNT=7358
       
global sampleZ_COUNT
       sampleZ_COUNT=7358
       
global sampleZ_PRS_COUNT
       sampleZ_PRS_COUNT=7034
       
global sampleZ_PRECISION
       sampleZ_PRECISION=2

global sampleZ_STEP
global sampleZ_STEP_MASK
       sampleZ_STEP_MASK=0


def _sampleZ_count_isHalf() '{
        local lo_lmt, hi_lmt, max_count, max_count_bit, half_count, half_count_bit
        local i,j,rtn

        max_count = sampleZ_MAX_COUNT
        half_count = max_count >> 1

        max_count_bit = 1 + int(log10(max_count))
        half_count_bit = 1 + int(log10(half_count))

		"""
        print(sprintf("max_count is %d", max_count))
        print(sprintf("max_count_bit is %d", max_count_bit))
        print(sprintf("half_count is %d", half_count))
        print(sprintf("half_count_bit is %d", half_count_bit))
		"""

        j = half_count_bit - 2
        lo_lmt = int(half_count/exp10(j))*exp10(j)
        hi_lmt = lo_lmt + exp10(j)

		"""
        print(sprintf("lo_lmt is %d", lo_lmt))
        print(sprintf("hi_lmt is %d", hi_lmt))
        """

        if (sampleZ_COUNT < lo_lmt) {
                rtn = -1
        } else if (sampleZ_COUNT <= hi_lmt) {
                rtn = 0        
        } else {
                rtn = 1
        }
        return rtn
}'

def _sampleZ_ct '
        waitmove
        count_em
        waitcount
        
        sampleZ_PRS_COUNT=sampleZ_COUNT
        
        # 设置 sampleZ_COUNT 是哪个 counter
        sampleZ_COUNT=S[2]
        
        if (sampleZ_COUNT > sampleZ_MAX_COUNT) {
               sampleZ_MAX_COUNT=sampleZ_COUNT
        }
'

def _sampleZ_mvdown '
        local _step
        _step = 0 - sampleZ_STEP
        umv zz _step
'

def _sampleZ_mvup '
        local _step
        _step = sampleZ_STEP
        umv zz _step
'

def _sampleZ_count_isEqual() '{
       local prs_count, prt_count, count_bit, ct_precision
       
       prs_count = sampleZ_PRS_COUNT
       prt_count = sampleZ_COUNT
       ct_precision = sampleZ_PRECISION
       
       count_bit = 1 + int(log10(prt_count))
       
       prs_count = int(prs_count/exp10(count_bit-2))*exp10(count_bit-2)
       prt_count = int(prt_count/exp10(count_bit-2))*exp10(count_bit-2)
       
       if (fabs(prs_count-prt_count) <= sampleZ_PRECISION * exp10(count_bit-2)) {
              rtn = 1
       } else {
              rtn = 0
       }
       
       return rtn
}'

constant _sampleZ_mv_dict = [0:0.1, 1:0.05, 2:0.02, 3:0.01, 4:0.005]

def _sampleZ_adjust_step '
       local _flags
       
       _flags = $1
       
       if (_flags&0x01) {
              sampleZ_STEP_MASK=0
       } else if (_flags&0x02) {
              if (sampleZ_STEP_MASK > 0) {
                     sampleZ_STEP_MASK-=1
              }
       } else if (_flags&0x04) {
              if (sampleZ_STEP_MASK < 5) {
                     sampleZ_STEP_MASK+=1
              }
       }
       sampleZ_STEP=_sampleZ_mv_dict[sampleZ_STEP_MASK]
'

"""
def sampleZ_assign '
       local loop_time
       local tmp

       # 这个循环后有光露出来，但是不知道是否所有光都露出来
       _sampleZ_adjust_step 0x01
	   while(1) {
              _sampleZ_ct
              if ( sampleZ_COUNT == 0) {
                     _sampleZ_mvdown; continue;
              }
              else {
                     break;
              }
	   }
	   
	   # 这个循环后，所有光露出来，还要记录最大光强
	   while(1) {
	          # TODO：重新设置 mv 步长
	          # _sampleZ_adjust_step 
	          _sampleZ_mvdown
	          _sampleZ_ct
	          if ( _sampleZ_count_ifEqual()) {
	                 break
	          }
	          else {
	                 continue
	          }
	   }
	   
	   # 向上 mv，成功则结束，否则继续移动
	   while (1) {
	          sampleZ_mvup
	          sampleZ_count
	          tmp = _sampleZ_count_isHalf()
	          if (tmp == 0) {
	                 break
	          } else if (tmp < 0) {
	                 _sampleZ_adjust_step 0x04
	                 continue
	          } else {
	                 # 首先回退到原位置
	                 sampleZ_mvdown
	                 # TODO：重新设置 mv 步长
	                 continue
	          } 
	   }
'

def sampleZ_config '
'
"""
